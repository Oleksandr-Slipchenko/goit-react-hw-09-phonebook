{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","fadeModules/fadeContactFormAlert.module.css","fadeModules/fadeContactList.module.css","components/Filter/Filter.module.css","views/ContactsView/ContactsView.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactListItem.js","components/ContactList/ContactLis.js","components/Filter/Filter.js","views/ContactsView/ContactsView.js"],"names":["module","exports","ContactForm","useState","number","setNumber","name","setName","message","setMessage","alert","setAlert","dispatch","useDispatch","contacts","useSelector","contactsSelectors","getAllContacts","handleInputChange","e","target","value","handleAlert","setTimeout","validateForm","isExistContact","find","contact","toLowerCase","resetForm","CSSTransition","in","timeout","classNames","fadeAlert","unmountOnExit","className","s","form","onSubmit","preventDefault","contactsOperations","addContact","sectionName","label","inputTitle","input","type","onChange","sectionNumber","button","ContactListItem","id","onRemove","contactListItem","contactName","onClick","buttonTitle","connect","state","getVisibleContacts","contactId","removeContact","TransitionGroup","component","contactList","map","fadeStyles","filter","getFilter","contactsActions","filterInput","App","useEffect","fetchContacts","Container","page","appear","phoneBookTitle","findContacts","findContactsTitle","ContactLis"],"mappings":"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","file":"static/js/ContactsView.ab008e6b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__2yVrS\",\"contactListItem\":\"ContactList_contactListItem__3gN2t\",\"button\":\"ContactList_button__6Q3Id\",\"buttonTitle\":\"ContactList_buttonTitle__1z06t\",\"contactName\":\"ContactList_contactName__1q_Du\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1v1H9\",\"sectionName\":\"ContactForm_sectionName__3-9JJ\",\"sectionNumber\":\"ContactForm_sectionNumber__3S0PU\",\"label\":\"ContactForm_label__3h_hC\",\"input\":\"ContactForm_input__bYtlj\",\"inputTitle\":\"ContactForm_inputTitle__10BgO\",\"button\":\"ContactForm_button__qcgPy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"fadeContactFormAlert_enter__3rrQW\",\"enterActive\":\"fadeContactFormAlert_enterActive__3I_go\",\"exit\":\"fadeContactFormAlert_exit__2bzbS\",\"exitActive\":\"fadeContactFormAlert_exitActive__3jazT\",\"alert\":\"fadeContactFormAlert_alert__2N66c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"fadeContactList_enter__3h9_8\",\"enterActive\":\"fadeContactList_enterActive__32_q4\",\"exit\":\"fadeContactList_exit__FDHV4\",\"exitActive\":\"fadeContactList_exitActive__3YS4D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterInput\":\"Filter_filterInput__3yMc3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"ContactsView_page__2M1SS\",\"phoneBookTitle\":\"ContactsView_phoneBookTitle__1aZ9I\",\"findContacts\":\"ContactsView_findContacts__3DuE8\",\"findContactsTitle\":\"ContactsView_findContactsTitle__15isL\",\"appear\":\"ContactsView_appear__1fYdf\",\"appearActive\":\"ContactsView_appearActive__1-dSJ\"};","// import { Component } from 'react';\nimport React, { useState } from 'react';\n// import PropTypes from 'prop-types';\nimport s from './ContactForm.module.css';\nimport fadeAlert from '../../fadeModules/fadeContactFormAlert.module.css';\nimport { CSSTransition } from 'react-transition-group';\n\n// import { connect } from 'react-redux';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\n\nexport default function ContactForm() {\n  const [number, setNumber] = useState('');\n  const [name, setName] = useState('');\n  const [message, setMessage] = useState('');\n  const [alert, setAlert] = useState(false);\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.getAllContacts);\n\n  // const handleNameChange = e => {\n  //   setName(e.target.value);\n  // };\n\n  // const handleNumberChange = e => {\n  //   setNumber(e.target.value);\n  // };\n\n  // или:\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const isValidateForm = validateForm();\n\n    if (!isValidateForm) return;\n\n    dispatch(contactsOperations.addContact(name, number));\n\n    resetForm();\n  };\n\n  const handleAlert = message => {\n    setAlert(true);\n    setMessage(message);\n\n    setTimeout(() => setAlert(false), 2000);\n  };\n\n  const validateForm = () => {\n    if (!name || !number) {\n      handleAlert('Some field is empty');\n\n      return;\n    }\n\n    // if contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())\n    //   toggleAlert('Contact is already exist');\n    //   return;\n    // }\n\n    //////    или:\n\n    const isExistContact = !!contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n\n    isExistContact && handleAlert('This contact already exists');\n\n    return !isExistContact;\n  };\n\n  const resetForm = () => {\n    setNumber('');\n    setName('');\n  };\n\n  return (\n    <>\n      <CSSTransition\n        in={alert}\n        timeout={250}\n        classNames={fadeAlert}\n        unmountOnExit\n      >\n        <p className={fadeAlert.alert}>{message}</p>\n      </CSSTransition>\n      <form className={s.form} onSubmit={handleSubmit}>\n        <section className={s.sectionName}>\n          <label className={s.label}>\n            <p className={s.inputTitle}>Name</p>\n            <input\n              className={s.input}\n              type=\"text\"\n              value={name}\n              name=\"name\"\n              onChange={handleInputChange}\n            />\n          </label>\n        </section>\n        <section className={s.sectionNumber}>\n          <label className={s.label}>\n            <p className={s.inputTitle}>Number</p>\n            <input\n              className={s.input}\n              type=\"tel\"\n              value={number}\n              name=\"number\"\n              onChange={handleInputChange}\n            />\n          </label>\n        </section>\n        <button className={s.button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n}\n\n// const INITIAL_STATE = {\n//   number: '',\n//   name: '',\n//   alert: false,\n//   message: '',\n// };\n\n// class ContactForm extends Component {\n//   static propTypes = {\n//     onSubmit: PropTypes.func.isRequired,\n//   };\n\n//   state = INITIAL_STATE;\n\n//   handleInputChange = e => {\n//     const { name, value } = e.target;\n\n//     this.setState({\n//       [name]: value,\n//     });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n//     const { name, number } = this.state;\n//     const { onSubmit } = this.props;\n//     const isValidateForm = this.validateForm();\n\n//     if (!isValidateForm) return;\n\n//     onSubmit(name, number);\n//     this.resetForm();\n//   };\n\n//   validateForm = () => {\n//     const { name, number } = this.state;\n//     const { contacts } = this.props;\n\n//     if (!name || !number) {\n//       this.setState({ alert: true, message: 'Some field is empty' });\n//       setTimeout(() => this.setState({ alert: false, message: '' }), 2000);\n//       return;\n//     }\n\n//     const isExistContact = !!contacts.find(contact => contact.name === name);\n\n//     isExistContact &&\n//       this.setState({ alert: true, message: 'This contact already exists' });\n//     setTimeout(() => this.setState({ alert: false, message: '' }), 2000);\n//     return !isExistContact;\n//   };\n\n//   resetForm = () => {\n//     this.setState(INITIAL_STATE);\n//   };\n\n//   render() {\n//     const { name, number, alert, message } = this.state;\n//     return (\n//       <>\n//         <CSSTransition\n//           in={alert}\n//           timeout={250}\n//           classNames={fadeAlert}\n//           unmountOnExit\n//         >\n//           <p className={fadeAlert.alert}>{message}</p>\n//         </CSSTransition>\n//         <form className={s.form} onSubmit={this.handleSubmit}>\n//           <section className={s.sectionName}>\n//             <label className={s.label}>\n//               <p className={s.inputTitle}>Name</p>\n//               <input\n//                 className={s.input}\n//                 type=\"text\"\n//                 value={name}\n//                 name=\"name\"\n//                 onChange={this.handleInputChange}\n//               />\n//             </label>\n//           </section>\n//           <section className={s.sectionNumber}>\n//             <label className={s.label}>\n//               <p className={s.inputTitle}>Number</p>\n//               <input\n//                 className={s.input}\n//                 type=\"tel\"\n//                 value={number}\n//                 name=\"number\"\n//                 onChange={this.handleInputChange}\n//               />\n//             </label>\n//           </section>\n//           <button className={s.button} type=\"submit\">\n//             Add contact\n//           </button>\n//         </form>\n//       </>\n//     );\n//   }\n// }\n\n// const mapStateToProps = state => ({\n//   contacts: contactsSelectors.getAllContacts(state),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onSubmit: (name, number) =>\n//     dispatch(contactsOperations.addContact(name, number)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import s from './ContactList.module.css';\n\nconst ContactListItem = ({ id, name, number, onRemove }) => {\n  return (\n    <li className={s.contactListItem}>\n      <span className={s.contactName}>\n        {name}: {number}{' '}\n      </span>\n\n      <button className={s.button} onClick={() => onRemove(id)}>\n        <p className={s.buttonTitle}>delete</p>\n      </button>\n    </li>\n  );\n};\n\nexport default ContactListItem;\n","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\nimport fadeStyles from '../../fadeModules/fadeContactList.module.css';\nimport ContactListItem from './ContactListItem';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { contactsSelectors, contactsOperations } from '../../redux/contacts';\n\nconst ContactsList = ({ contacts, onRemove }) => {\n  return (\n    <TransitionGroup component=\"ul\" className={s.contactList}>\n      {contacts.map(contact => (\n        <CSSTransition key={contact.id} timeout={250} classNames={fadeStyles}>\n          <ContactListItem {...contact} onRemove={onRemove} />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onRemove: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onRemove: contactId => dispatch(contactsOperations.removeContact(contactId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nimport { connect } from 'react-redux';\nimport * as contactsActions from '../../redux/contacts/contacts-actions';\nimport { contactsSelectors } from '../../redux/contacts';\n\nconst Filter = ({ filter, onChange }) => {\n  return (\n    <div className={s.filter}>\n      <input\n        className={s.filterInput}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={({ target }) => onChange(target.value)}\n      />\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  filter: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactsActions.changeFilter(e)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","// import { Component} from 'react';\nimport { useEffect } from 'react';\n\nimport { useDispatch } from 'react-redux';\n// import {useSelector } from 'react-redux';\n// import { connect } from 'react-redux';\n\nimport { CSSTransition } from 'react-transition-group';\nimport Container from '../../components/Container';\nimport ContactForm from '../../components/ContactForm';\nimport ContactList from '../../components/ContactList';\nimport Filter from '../../components/Filter';\nimport s from './ContactsView.module.css';\nimport {\n  contactsOperations,\n  // contactsSelectors,\n} from '../../redux/contacts/index';\n\nexport default function App() {\n  const dispatch = useDispatch();\n  // const isLoadingContacts = useSelector(contactsSelectors.getLoading);\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container className={s.page}>\n      <div className={s.page}>\n        <CSSTransition\n          in={true}\n          appear={true}\n          timeout={500}\n          classNames={s}\n          unmountOnExit\n        >\n          <h1 className={s.phoneBookTitle}>Phonebook</h1>\n        </CSSTransition>\n        {/* {isLoadingContacts && <h3 className={s.loading}>Loading...</h3>} */}\n        <ContactForm />\n        <div className={s.findContacts}>\n          <h2 className={s.findContactsTitle}>Find contacts</h2>\n          <Filter />\n        </div>\n        <ContactList />\n      </div>\n    </Container>\n  );\n}\n\n// class App extends Component {\n//   componentDidMount() {\n//     this.props.fetchContacts();\n//   }\n\n//   render() {\n//     return (\n//       <Container className={s.page}>\n//         <div className={s.page}>\n//           <CSSTransition\n//             in={true}\n//             appear={true}\n//             timeout={500}\n//             classNames={s}\n//             unmountOnExit\n//           >\n//             <h1 className={s.phoneBookTitle}>Phonebook</h1>\n//           </CSSTransition>\n//           {/* {this.props.isLoadingContacts && (\n//             <h3 className={s.loading}>Loading...</h3>\n//           )} */}\n//           <ContactForm />\n//           <div className={s.findContacts}>\n//             <h2 className={s.findContactsTitle}>Find contacts</h2>\n//             <Filter />\n//           </div>\n//           <ContactList />\n//         </div>\n//       </Container>\n//     );\n//   }\n// }\n// const mapStateToProps = state => ({\n//   isLoadingContacts: contactsSelectors.getLoading(state),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\n"],"sourceRoot":""}